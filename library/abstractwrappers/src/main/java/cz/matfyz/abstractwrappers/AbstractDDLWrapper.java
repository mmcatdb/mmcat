package cz.matfyz.abstractwrappers;

import cz.matfyz.abstractwrappers.exception.UnsupportedException;
import cz.matfyz.core.mapping.StaticName;

public interface AbstractDDLWrapper {

    String PATH_SEPARATOR = "/";
    String DYNAMIC_NAME = "*";
    String EMPTY_NAME = StaticName.createAnonymous().getStringName();
    String INDENTATION = "    ";

    void setKindName(String name);

    boolean isSchemaless();

    boolean addSimpleProperty(String path, boolean required) throws UnsupportedException;

    boolean addSimpleArrayProperty(String path, boolean required) throws UnsupportedException;

    boolean addComplexProperty(String path, boolean required) throws UnsupportedException;

    boolean addComplexArrayProperty(String path, boolean required) throws UnsupportedException;

    AbstractStatement createDDLStatement();

    // Static vs Dynamic names
    //
    // Following the theory, the methods in this class should have a Set<String> parameter for path. The reason is as follows:
    //  - A property path is a concatenated path (e.g., "a/b/c") of names.
    //  - However, dynamic names are supported. E.g., instead of "email", we can have multiple values ([ "c1", "c2", "c3" ]).
    //  - So, instead of string, we provide a set of all possibilities ([ "a/b/c1", "a/b/c2", "a/b/c3" ]).
    //      - They are, of course, concatenated with the rest of the path. Therefore, if there are multiple dynamic names on the path, all combinations are provided.
    //
    // This is, however, highly counterintuitive, because most properties have simple names. But there is one more thing ... the dynamic names aren't even supposed to be in the DDL output!
    // A database system is either schemaless or schemaful:
    //  - If it's schemaless, this whole wrapper does nothing. The DDL is generated by the database system itself.
    //      - Logically, most systems that support dynamic names are schemaless.
    //  - If it's schemaful, the information should be included in the mapping.
    //      - If it isn't here, there is either a bug in the mapping, or it isn't needed in the first place.
    //  - Let's consider Cassandra as an example. It's schemaful and it supports the map<key, value> type. So it can make use of dynamic names. But the values of the names aren't needed for DDL! We just use map<text, text> or something.
    //      - Yes, we need the values for DML, but that's a different story.
    //
    // Therefore, we use only a single string path. It still isn't perfect (we should use an array of the names instead), but we can fix that later.

}
